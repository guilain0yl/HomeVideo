using System;
using System.Collections.Generic;
using System.Text;

namespace ArgCheck.Core
{
    public class RegexStringHelper
    {
        private static readonly string[] ver_rule = new string[] {
            @"^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$",//邮箱验证 0
            @"^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$",//手机号码验证 1
            @"^[\u4e00-\u9fa5]{0,}$",//汉字 2
            @"",// 3
            @"^.{3,20}$",//长度为3-20的所有字符 4
            @"^[A-Za-z]+$",//由26个英文字母组成的字符串 5
            @"^[A-Z]+$",//由26个大写英文字母组成的字符串 6
            @"^[a-z]+$",//由26个小写英文字母组成的字符串 7
            @"^[A-Za-z0-9]+$",//由数字和26个英文字母组成的字符串 8
            @"^\w+$",//由数字、26个英文字母或者下划线组成的字符串 9
            @"^[\u4E00-\u9FA5A-Za-z0-9_]+$",//中文、英文、数字包括下划线 10
            @"^[\u4E00-\u9FA5A-Za-z0-9]+$",//中文、英文、数字但不包括下划线等符号 11
            @"[^%&’,;=?$\x22]+",//可以输入含有^%&’,;=?$\”等字符 12
            @"[^~\x22]+",//禁止输入含有~的字符 13
            @"[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?",//域名 14
            @"[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$",//InternetURL 15
            @"^($$\d{3,4}-)|\d{3.4}-)?\d{7,8}$",//电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX) 16
            @"\d{3}-\d{8}|\d{4}-\d{7}",//国内电话号码(0511-4405222、021-87888822) 17
            @"^\d{15}|\d{18}$",//身份证号(15位、18位数字) 18
            @"^([0-9]){7,18}(x|X)?$",//短身份证号码(数字、字母x结尾) 19
            @"^[a-zA-Z][a-zA-Z0-9_]{4,15}$",//帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线) 20
            @"^[a-zA-Z]\w{5,17}$", //密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线) 21
            @"^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$",//强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间) 22
            @"^\d{4}-\d{1,2}-\d{1,2}",//日期格式 23
            @"^(0?[1-9]|1[0-2])$",//一年的12个月(01～09和1～12) 24
            @"^((0?[1-9])|((1|2)[0-9])|30|31)$",//一个月的31天(01～09和1～31) 25
            @"^[1-9][0-9]*$",//钱的输入格式： 有四种钱的表示形式我们可以接受:”10000.00″ 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000” 26
            @"^(0|[1-9][0-9]*)$",//这表示任意一个不以0开头的数字，但是，这也意味着一个字符”0″不通过，所以我们采用下面的形式 27
            @"^(0|-?[1-9][0-9]*)$",//一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号 28
            @"^[0-9]+(.[0-9]+)?$",//这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉，因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分 29
            @"^[0-9]+(.[0-9]{2})?$",//必须说明的是，小数点后面至少应该有1位数，所以”10.”是不通过的，但是 “10” 和 “10.2” 是通过的 30
            @"^[0-9]+(.[0-9]{1,2})?$",//这样我们规定小数点后面必须有两位，如果你认为太苛刻了，可以这样 31
            @"^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$",//这样就允许用户只写一位小数。下面我们该考虑数字中的逗号了，我们可以这样 32
            @"^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$",//1到3个数字，后面跟着任意个 逗号+3个数字，逗号成为可选，而不是必须,备注：这就是最终结果了，别忘了”+”可以用”*”替代。如果你觉得空字符串也可以接受的话(奇怪，为什么?)最后，别忘了在用函数时去掉去掉那个反斜杠，一般的错误都在这里 33
            @"^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$",//xml文件 34
            @"[\u4e00-\u9fa5]",//中文字符的正则表达式 35
            @"[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))",//双字节字符 36
            @"\n\s*\r",//空白行的正则表达式，可用来删除空白行 37
            @"<(\S*?)[^>]*>.*?</\1>|<.*? />",//HTML标记的正则表达式 (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力) 38
            @"^\s*|\s*$或(^\s*)|(\s*$)",//首尾空白字符的正则表达式 (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式) 39
            @"[1-9][0-9]{4,}", //腾讯QQ号(腾讯QQ号从10000开始) 40
            @"[1-9]\d{5}(?!\d)",// (中国邮政编码为6位数字)//中国邮政编码 41 
            //@"\d+\.\d+\.\d+\.\d+",// (提取IP地址时有用)//IP地址 42
            @"((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))",//IP地址 42
             @"^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$"//IPV6地址 43
    };

        /// <summary>
        /// 获取常用regex字符串
        /// </summary>
        public static string GetRegexString(RegexStrEnum regexStrEnum)
            => ver_rule[Convert.ToInt32(regexStrEnum)];
    }
}
